<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.hervian</groupId>
	<artifactId>safety-mirror</artifactId>
	<version>4.0.2-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>safety-mirror</name>
	<description>Fun with Delegates, Events and type safe Java Reflection</description>
	<url>https://github.com/Hervian/safety-mirror</url>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	
	<developers>
        <developer>
            <id>anders</id>
            <name>Anders HÃ¸fft</name>
            <email>aghoefft@gmail.com</email>
            <timezone>+2</timezone>
        </developer>
    </developers>

	<scm>
		<connection>scm:git:https://github.com/Hervian/safety-mirror.git</connection>
		<url>http://github.com/hervian/safety-mirror</url>
		<developerConnection>scm:git:https://github.com/Hervian/safety-mirror.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.9</maven.compiler.source>
		<maven.compiler.target>1.9</maven.compiler.target>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.12</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
			<version>20.1.0</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>3.5.7</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>joor</artifactId>
			<version>0.9.13</version>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>1.18.12</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<!-- Perform a release by calling 'mvn release:clean release:prepare' answering the prompts for versions and tags, followed by 'mvn release:perform'.
                     This execution will deploy to OSSRH and release to the Central Repository in one go, thanks to the usage of the Nexus Staging Maven Plugin with autoReleaseAfterClose set to true. See below note under the release profile though. The call to 'mvn release:perform: currently fails saying that the lombok module cannot be found. Probably too old plugins being used transitively by the maven-release-plugin. Currently I therefor tag using the release plugin, but deploy via 'mvn clean deploy -P release'.
                 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.5.3</version>
				<configuration>
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<useReleaseProfile>false</useReleaseProfile>
					<releaseProfiles>release</releaseProfiles>
					<goals>deploy</goals>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<!-- Note that this profile is not intended to be called directly (via '-P release'), rather one should use the maven-release-plugin, which in turn activates the release-profile.
                However, in the time of writing the call to the maven-release-plugin's release goal fails since the older transitive plugin version used by that plugin cannot find the lombok module. As such, one must either delombok the project before "releasing" or - as I have done - release via 'mvn clean deploy -P release'. Remember to have a server section in the settings.xml with id=ossrh and a username and password for https://oss.sonatype.org/ with rights to write to the safety-mirror repositories. Also, to perform the gpg signing one must have a) the gpg tool installed and ready on the path env and the proper privat key imported and the corresponding passphrase at hand.
             -->
			<id>release</id>
			<build>
				<!-- The plugins below have been added to satisfy the requirements to get the project added to the Maven Central Repository. Guide: https://central.sonatype.org/pages/requirements.html -->
				<plugins>
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<version>1.6.8</version>
						<extensions>true</extensions>
						<configuration>
							<serverId>ossrh</serverId>
							<nexusUrl>https://oss.sonatype.org/</nexusUrl>
							<autoReleaseAfterClose>true</autoReleaseAfterClose>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>3.2.1</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar-no-fork</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>3.2.0</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<!--Usage:
                            1. Install GnuPG
                            2. Create a key using the downloaded tool and store the private key safely (...)
                            3. Add the secret key to settings.xml
                            Guide: https://central.sonatype.org/pages/working-with-pgp-signatures.html
                            Troubleshooting: https://stackoverflow.com/questions/29885887/gpg-no-default-secret-key-error-using-maven
                        -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.6</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
								<configuration>
									<executable>C:\Program Files (x86)\GnuPG\bin\gpg.exe</executable>
									<keyname>2656E514CAC36531441C33EF130545B6CB763301</keyname>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
